import abc
import dataclasses

from typing import Any, Callable, List, Tuple, Union

from smaug.typing import Text


class Text2Text(abc.ABC):
    """Base class for models that map a sequence to other sequence."""

    @abc.abstractmethod
    def __call__(self, text: Text) -> Text:
        pass


class TokenClassification(abc.ABC):
    """Base class for models that classify a sequence or its tokens."""

    @abc.abstractmethod
    def __call__(self, text: Text) -> Any:
        pass


GeneratedSpan = Tuple[int, int]
GeneratedSpans = List[GeneratedSpan]


@dataclasses.dataclass
class MaskedLanguageModelOutput:

    text: Text

    spans: Union[GeneratedSpans, List[GeneratedSpans]]


# FIXME: Copy of mask.MaskFunction to avoid circular import
MaskFunction = Callable[[int], str]
"""Retrieves the ith mask token given i.

For methods where masks in the same sentences are different, this function
will be called with 0, 1, 2, ... and should return the 1st, 2nd, 3rd, ... masks.

For methods that do not distinguish masks, this function should always return
the same value.

Args:
    i: mask index.

Returns:
    mask token to insert
"""


class MaskedLanguageModel(abc.ABC):
    """Base class for masked language models.

    Models that implement this class should receive sentences with
    masked tokens, using the defined masking pattern and return content
    generated by processing the tokens."""

    @classmethod
    @abc.abstractmethod
    def masking_func(cls) -> MaskFunction:
        """Defines the masking function that should be used to interact with this model."""
        pass

    @abc.abstractmethod
    def __call__(
        self, text: Text, return_spans: bool = False
    ) -> MaskedLanguageModelOutput:
        pass
